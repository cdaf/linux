solutionName=myproduct
# productName=My Product Name

# Global Error handling additional diagnostics
# CDAF_ERROR_DIAG=df

# containerBuild minimum configuration, if a Dockerfile is not found, a default file will be used
# containerImage=cdaf/linux

# containerBuild default process
# containerBuild="$AUTOMATIONROOT/processor/containerBuild.sh" $SOLUTION $BUILDNUMBER $REVISION $ACTION

# To limit container build to a particular environment
# defaultContainerBuild=WSL

# Immutable image based on the build artefacts
# constructor=TasksLocal

# CDAF_REGISTRY_URL=${CI_REGISTRY}
# CDAF_REGISTRY_TAG=${CI_REGISTRY}/linux/${SOLUTION}:$BUILDNUMBER
# CDAF_REGISTRY_USER=${CI_REGISTRY_USER}
# CDAF_REGISTRY_TOKEN=${CI_JOB_TOKEN}

artifactPrefix=0.0
# productVersion=2.0.0
# packageFeatures=minimal

# imageBuild minimum configuration, if a Dockerfile is not found, a default file will be created
# buildImage=cdaf/linux

# imageBuild default process
# imageBuild="$AUTOMATIONROOT/remote/imageBuild.sh" ${SOLUTION}_${REVISION} ${BUILDNUMBER} $runtimeImage $constructor
# CDAF_DOCKER_REQUIRED=yes

# defaultBranch=main
# defaultEnvironment=DESKTOP

# gitRemoteURL=https://github.com/cdaf/${SOLUTION}.git
# gitUserNameEnvVar=${GIT_USER}
# gitUserPassEnvVar=${GIT_PASS}
# gitCustomCleanup="$AUTOMATIONROOT/buildandpackage/clean.sh"

# processSequence=localTasks.sh remoteTasks.sh containerTasks.sh

# containerDeploy minimal config, if directory containerDeploy is found, a customer image build will be attempted
# runtimeImage=cdaf/linux

# containerDeploy default process
# containerDeploy="${CDAF_CORE}/containerDeploy.sh" "${ENVIRONMENT}" "${RELEASE}" "${SOLUTION}" "${BUILDNUMBER}" "${SOLUTION}_${REVISION}_containerdeploy"
# CDAF_HOME_MOUNT=no

# containerDeploy including additional files in image, and retain the resulting image
# runtimeFiles=$WORKSPACE_ROOT/release.sh $CDAF_CORE/sendCrypt.sh
# runtimeRetain=yes
