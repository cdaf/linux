name: CDAF Targetless CD using hosted agent
# This workflow is triggered on pushes to the repository.
on: [push]

jobs:
  build:
    name: Build and Unit Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Fetch all history for all tags and branches
        run: |
          git config remote.origin.url https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
          git fetch --prune --unshallow

      - name: CDAF
        run: |
          cd ${GITHUB_WORKSPACE}

          # Using CDAF Edge
          curl -s https://raw.githubusercontent.com/cdaf/linux/master/install.sh | bash -
          ./automation/entry.sh ${GITHUB_RUN_NUMBER} ${GITHUB_REF}

          # CDAF installed in repo
          # ./automation/entry.sh ${GITHUB_RUN_NUMBER} ${GITHUB_REF}

      - name: Artifact Retention
        uses: actions/upload-artifact@v4
        with:
          name: deploy
          path: release.sh

  # Test using Docker Compose
  test:
    if: github.ref == 'refs/heads/main'
    name: Package and Test
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: deploy
          path: drop
    
      - name: DOCKER
        run: |
          cd ${GITHUB_WORKSPACE}/drop
          chmod +x release.sh
          ./release.sh DOCKER

#  # As at Jul 2021 there is no gating capability in GitHub Actions
#  deploy:
#    if: github.ref == 'refs/heads/main'
#    name: Continuous Deploy
#    needs: [build, test]
#    runs-on: ubuntu-latest
#    steps:
#      - name: Download Artifacts
#        uses: actions/download-artifact@v4
#        with:
#          name: deploy
#          path: drop
#    
#      - name: PROD
#        run: |
#          cd ${GITHUB_WORKSPACE}/deploy
#          chmod +x release.sh
#          ./release.sh PROD

  push:
    if: github.ref == 'refs/heads/main'
    name: Continuous Deploy
    needs: [build, test]
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: deploy
          path: drop
    
      - name: PUSH
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd ${GITHUB_WORKSPACE}/drop
          chmod +x release.sh
          ./release.sh PUSH
