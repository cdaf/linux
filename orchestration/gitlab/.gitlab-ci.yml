stages:
  - build
  - targetlessCD
  - staging
  - live

cdaf-ci:
  stage: build

  # To use native container runner with CDAF pre-installed
  image: cdaf/linux
  script: entry.sh ${CI_PIPELINE_IID} ${CI_COMMIT_BRANCH}
  # Self-hosted Runner
  # tags:
  #   - bash

  # Latest Published Release
  # script: |
  #   curl --silent https://cdaf.io/static/app/downloads/cdaf.sh | bash -
  #   ./automation/entry.sh ${CI_BUILD_ID} ${CI_BUILD_REF_NAME}

  # Edge Implementation 
  #  script: |
  #    curl -s https://raw.githubusercontent.com/cdaf/linux/master/install.sh | bash -
  #    ./automation/entry.sh ${CI_BUILD_ID} ${CI_BUILD_REF_NAME}

  # In-source Implementation 
  #  script: "automation/entry.sh ${CI_BUILD_ID} ${CI_BUILD_REF_NAME}"

  artifacts:
    paths:
      - release.sh
    reports:
      junit: "**/test-results/*.xml"

cd:
  stage: targetlessCD
  tags:
    - bash
  script: |
    ./release.sh ${CI_JOB_NAME} ${CI_PIPELINE_ID}
  dependencies:
    - cdaf-ci
  needs:
    - cdaf-ci
  only:
    - main

test:
  stage: staging
  tags:
    - bash
  script: |
    ./release.sh ${CI_JOB_NAME} ${CI_PIPELINE_ID}
  environment: live
  dependencies:
    - cdaf-ci
  needs:
    - cdaf-ci
    - cd
  only:
    - main

production:
  stage: live
  tags:
    - bash
  script: |
    ./release.sh ${CI_JOB_NAME} ${CI_PIPELINE_ID}
  when: manual
  environment: staging
  dependencies:
    - cdaf-ci
  needs: 
    - test
    - cdaf-ci
  only:
    - main
