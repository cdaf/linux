node  {
  properties(
    [
      [
        $class: 'BuildDiscarderProperty',
        strategy: [$class: 'LogRotator', numToKeepStr: '10']
      ],
      pipelineTriggers(
        [
	      [$class: "SCMTrigger", scmpoll_spec: "H/3 * * * *"],
	    ]
	  )
    ]
  )
}

// Define as multi-branch build, or the BRANCH_NAME will not be set
node {
	try {
    stage ('CDAF') {

      checkout scm

      sh '''
        curl -s https://raw.githubusercontent.com/cdaf/linux/master/install.sh | bash -
        ./automation/entry.sh ${BUILD_NUMBER} ${BRANCH_NAME}
      '''
    }

    if ( env.BRANCH_NAME == 'master' ) {

      stage ('DOCKER') {
        sh "./release.sh DOCKER"
      }

      stage ('Product Owner Approval') { input "Push to Registry?" }

      withEnv(['CDAF_CD_USER=<user-nae>', 'CDAF_CD_MASK=<SHA256>']) {
        withCredentials([ string( credentialsId: 'CDAF_CD_PASS', variable: 'CDAF_CD_PASS') ]) {
          stage ('PuSH') {
            sh "./release.sh PUSH"
          }
        }
      }

    }

	} catch (e) {
		currentBuild.result = "FAILED"
		println currentBuild.result
		notifyFailed()
		throw e
	}
}

def notifyFailed() {

  emailext (
    recipientProviders: [[$class: 'DevelopersRecipientProvider']],
    subject: "Jenkins Job [${env.JOB_NAME}] Build [${env.BUILD_NUMBER}] failure",
    body: "Check console output at ${env.BUILD_URL}"
  )
}