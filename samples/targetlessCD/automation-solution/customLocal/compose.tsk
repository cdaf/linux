echo "List containers current state"
docker ps

echo "Load the branch (REVISION) & containerImage from the manifest, placed here by package.tsk"
PROPLD manifest.txt
branch=$(echo "$REVISION" | tr '[A-Z]' '[a-z]')
ASSIGN $id="${SOLUTION}_${branch}"
export WORK_SPACE="$(dirname "$(pwd)")"

echo "Check is using podman, as this applies a prefix to the image name"
test=$(podman --version 2>&1); if [ $? -eq 0 ]; then prefix='localhost/'; echo $test; fi

# Copy any artefacts needed into specific images here, example brings in remoteTasks package
# VECOPY ../${SOLUTION}-${BUILDNUMBER}.tar.gz compose/target/deploy.tar.gz"

echo "Build all images, i.e. directories"
cd compose
../imageBuild.sh ${id} ${BUILDNUMBER} ${containerImage}
cd ..

echo "Clean-up old images and transient directory Created by imageBuild.sh"
export TARGET_TAG="${prefix}${id}_taskslocal"
"$WORKSPACE/dockerClean.sh" ${TARGET_TAG} ${BUILDNUMBER}
export TEST_TAG="${prefix}${id}_test"
"$WORKSPACE/dockerClean.sh" ${TEST_TAG} ${BUILDNUMBER}
REMOVE /tmp/${SOLUTION}

echo "Do not run in workspace to avoid file locks"
ASSIGN $composePersist="/tmp/${id}"
MAKDIR $composePersist
VECOPY compose/docker-compose.yml $composePersist
cd $composePersist

echo "Cleanup from previously test"
docker-compose down

echo "Set build number for environment"
export TARGET_TAG="${TARGET_TAG}:${BUILDNUMBER}"
export TEST_TAG="${TEST_TAG}:${BUILDNUMBER}"

echo "Deploy to target $TARGET_TAG"
docker-compose up -d target

containerID=$(docker ps -aq --filter "ancestor=$TARGET_TAG")
"$WORKSPACE/dockerLog.sh" $containerID 'Running server ...'

echo "Execute tests $TEST_TAG (allow 2 minutes to complete)"
docker-compose up -d test
containerID=$(docker ps -aq --filter "ancestor=$TEST_TAG")
"$WORKSPACE/dockerLog.sh" $containerID 'Automated Test Execution Completed Successfully.' 120

echo "Retain or teardown based on environment variable COMPOSE_KEEP ($COMPOSE_KEEP)"
if [ -z "$COMPOSE_KEEP" ]; then docker-compose down ; else docker inspect -f '{{.Name}} - {{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker ps -aq) ; fi

cd "$WORKSPACE"
