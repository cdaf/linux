# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.

# Different VM images can be used by changing this variable, to use an older distribution
# $env:OVERRIDE_IMAGE = 'cdaf/Ubuntu18'
if ENV['OVERRIDE_IMAGE']
  vagrantBox = ENV['OVERRIDE_IMAGE']
else
  vagrantBox = 'cdaf/Ubuntu20'
end

# If this environment variable is set, then the location defined will be used for media
# ./automation/provisioning/setenv.sh SYNCED_FOLDER /opt/.provision
if ENV['SYNCED_FOLDER']
  synchedFolder = ENV['SYNCED_FOLDER']
end

Vagrant.configure(2) do |config|

  # Atlas Box construction test definition
  config.vm.define 'test' do |test|  
    test.vm.box = "#{vagrantBox}"
    test.vm.provision 'shell', inline: 'echo ; echo "Check disk availability"; echo'
    test.vm.provision 'shell', inline: 'df'

    test.vm.provision 'shell', inline: 'echo ; echo "Check IP addresses"; echo'
    test.vm.provision 'shell', inline: 'ip a'

    test.vm.provision 'shell', inline: 'echo ; echo "Check IP routes"; echo'
    test.vm.provision 'shell', inline: 'ip r'

    test.vm.provision 'shell', inline: 'echo ; echo "List IP resolution"; echo'
    test.vm.provision 'shell', inline: "getent ahosts 'google.com'"

    test.vm.provision 'shell', inline: 'echo ; echo "List the default adapter (verifies connectivity)"; echo'
    test.vm.provision 'shell', inline: "ip route get 8.8.8.8 | head -n1 | awk '{print $5}'"

    test.vm.provision 'shell', inline: 'echo ; echo "Test Complete"; echo'

    # Oracle VirtualBox with private NAT has insecure deployer keys for desktop testing
    test.vm.provider 'virtualbox' do |virtualbox, override|
      override.vm.network 'private_network', ip: '172.16.17.77'
      override.vm.provision 'shell', inline: 'echo ; echo "Verify Volume Mount (VirtualBox integration)"; echo'
      override.vm.provision 'shell', inline: 'ls -al /vagrant'
    end

    # Microsoft Hyper-V does not support NAT or setting hostname
    test.vm.provider 'hyperv' do |hyperv, override|
      hyperv.vmname = "linux-test"
      if ENV['VAGRANT_SMB_USER']
        override.vm.synced_folder ".", "/vagrant", type: "smb", smb_username: "#{ENV['VAGRANT_SMB_USER']}", smb_password: "#{ENV['VAGRANT_SMB_PASS']}", mount_options: ['vers=2.1']
        override.vm.provision 'shell', inline: 'echo ; echo "Verify Volume Mount (VirtualBox integration)"; echo'
        override.vm.provision 'shell', inline: 'ls -al /vagrant'
      end
    end
  end

end
